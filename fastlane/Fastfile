# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

desc "Make sure to copy the `.env.dist` to `.env` and fill all values before running any lanes"

platform :ios do

  desc 'Fetch certificates and provisioning profiles'
  lane :certificates do
    match(type: 'development', keychain_password: ENV['MATCH_PASSWORD'])
    match(type: 'appstore', keychain_password: ENV['MATCH_PASSWORD'])
  end

  desc 'Build the iOS application.'
  lane :build do
    # certificates

    require "json"
    package_json = JSON.parse(File.read("../package.json"))
    increment_version_number_in_xcodeproj(
      version_number: package_json["version"],
      xcodeproj: "ios/BinaryClock.xcodeproj"
    )
    increment_build_number_in_xcodeproj(
      xcodeproj: "ios/BinaryClock.xcodeproj"
    )

    gym

    echo(message: "----------------------------------------------------------")
    echo(message: "HELP: If the build FAILED, make sure to...")
    echo(message: "  (1) run `fastlane ios certificates`, AND")
    echo(message: "  (2) unlock the keychain with `security unlock-keychain`.")
    echo(message: "----------------------------------------------------------")
  end

  desc "Publish a beta release to the App Store"
  lane :beta do
    build
    app_store_connect_api_key(
      key_id: ENV["IOS_APP_STORE_CONNECT_KEY_ID"],
      issuer_id: ENV["IOS_APP_STORE_CONNECT_ISSUER_ID"],
      key_filepath: ENV["IOS_APP_STORE_CONNECT_KEY_FILE_PATH"],
    )
    upload_to_testflight
  end
  
  desc "Publish a production release to the App Store"
  lane :production do
    build
    app_store_connect_api_key(
      key_id: ENV["IOS_APP_STORE_CONNECT_KEY_ID"],
      issuer_id: ENV["IOS_APP_STORE_CONNECT_ISSUER_ID"],
      key_filepath: ENV["IOS_APP_STORE_CONNECT_KEY_FILE_PATH"],
    )
    upload_to_app_store(
      precheck_include_in_app_purchases: false,
      submission_information: {
        add_id_info_uses_idfa: false,
      },
      submit_for_review: true,
      metadata_path: "./fastlane/metadata/ios",
      force: true
    )
  end

  desc 'Reset certificates and provisioning profiles (e.g. after expiration)'
  lane :certificates_reset do
    echo(message: "----------------------------------------------------------")
    echo(message: "üëÄ Resetting certificates takes some manual work...")
    echo(message: "  (1) App Store Connect")
    echo(message: "      - [ ] Revoke expired certificates: https://developer.apple.com/account/resources/certificates/list")
    echo(message: "      - [ ] Revoke expired profiles: https://developer.apple.com/account/resources/profiles/list")
    echo(message: "  (2) Git: %{url}" % { url: ENV['IOS_CERTIFICATE_REPOSITORY_URL']})
    echo(message: "      - [ ] Delete expired certificates (.cer, .p12)")
    echo(message: "      - [ ] Delete expired profiles (.mobileprovision)")
    echo(message: "----------------------------------------------------------")
    complete = prompt(text: "Have you completed the manual steps above?", boolean: true)
    if complete
      echo(message: "üèóÔ∏è Attempting to update certificates")
      begin
        sh('sed -i "" "s/readonly/# readonly/" Matchfile')  # Make certificates editable
        certificates
        echo(message: "‚úÖ Certificates updated.")
        echo(message: "üëÄ Double check your keychain to ensure old certs are no longer installed.")
        echo(message: "üÜò If you still have signing problems, try here: https://forums.developer.apple.com/forums/thread/712005")
      ensure
        sh('sed -i "" "s/# readonly/readonly/" Matchfile')  # Re-lock edits of certificates
      end
    else
      echo(message: "‚ùå Certificates were NOT adjusted")
    end
  end

end

platform :android do

  desc "Build the Android application."
  lane :build do
    gradle(task: 'incrementVersionCode', project_dir: 'android/')
    gradle(task: 'syncVersionName', project_dir: 'android/')
    gradle(task: 'clean', project_dir: 'android/')
    gradle(task: 'bundle', build_type: 'Release', project_dir: 'android/')
  end

  desc "Publish an internal release to the Play Store"
  lane :internal do
    build
    supply(track: 'internal', track_promote_to: 'internal')
  end

  desc "Publish a alpha release to the Play Store"
  lane :alpha do
    build
    supply(track: 'alpha', track_promote_to: 'alpha')
  end

  desc "Publish a beta release to the Play Store"
  lane :beta do
    build
    supply(track: 'beta', track_promote_to: 'beta')
  end

  desc "Publish a production release to the Play Store"
  lane :production do
    build
    supply(track: 'production', track_promote_to: 'production')
  end

end